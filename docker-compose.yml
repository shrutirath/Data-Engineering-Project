version: '3'

services:
  webserver:
    image: apache/airflow:2.6.0-python3.9
    command: webserver
    entrypoint: ['/opt/airflow/script/entrypoint.sh']
    depends_on:
      - postgres
    environment:
      - LOAD_EX=n
      - EXECUTOR=Sequential
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW_WEBSERVER_SECRET_KEY=this_is_a_very_secret_key
    logging:
      options:
        max-size: 10m
        max-file: "3"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./script/entrypoint.sh:/opt/airflow/script/entrypoint.sh
      - ./new_requirements.txt:/opt/airflow/new_requirements.txt
      - ./data:/opt/airflow/data
    ports:
      - "8080:8080"
    healthcheck:
      test: ['CMD-SHELL', "[ -f /opt/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - airflow_network

  scheduler:
    image: apache/airflow:2.6.0-python3.9
    depends_on:
      webserver:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - ./script/entrypoint.sh:/opt/airflow/script/entrypoint.sh
      - ./new_requirements.txt:/opt/airflow/new_requirements.txt
      - ./data:/opt/airflow/data
    environment:
      - LOAD_EX=n
      - EXECUTOR=Sequential
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW_WEBSERVER_SECRET_KEY=this_is_a_very_secret_key
    command: bash -c "pip install -r ./new_requirements.txt && airflow db upgrade && airflow scheduler"
    networks:
      - airflow_network

  postgres:
    image: postgres:14.0
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    logging:
      options:
        max-size: 10m
        max-file: "3"
    networks:
      - airflow_network


  flask_api:
    image: python:3.9
    container_name: flask_api
    working_dir: /app
    command: bash -c "pip install -r new_requirements.txt && python app.py"
    volumes:
      - .:/app
    ports:
      - "5100:5100"
    networks:
      - airflow_network

  streamlit_ui:
    image: python:3.9
    container_name: streamlit_ui
    working_dir: /app
    command: bash -c "pip install -r new_requirements.txt && streamlit run streamlit_Ui.py --server.port 8501 --server.address 0.0.0.0"
    volumes:
      - .:/app
    ports:
      - "8501:8501"
    depends_on:
      - flask_api
    networks:
      - airflow_network

networks:
  airflow_network: